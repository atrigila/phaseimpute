nextflow_workflow {

    name "Test Workflow GET_REGION"
    script "../main.nf"
    workflow "GET_REGION"
    tag 'subworkflows'
    tag 'get_region'
    tag 'subworkflows/get_region'

    test("Should run with 'all'") {

        when {
            workflow {
                """
                input[0] = "all"
                input[1] = Channel.of([
                    [genome:"GRCh37"],
                    file("https://raw.githubusercontent.com/LouisLeNezet/test-datasets/phaseimpute/data/reference_genome/21_22/hs38DH.chr21_22.s.fa", checkIfExists: true),
                    file("https://raw.githubusercontent.com/LouisLeNezet/test-datasets/phaseimpute/data/reference_genome/21_22/hs38DH.chr21_22.s.fa.fai", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.regions).match() }
            )
        }
    }

    test("Should run with specified chr") {

        when {
            workflow {
                """
                input[0] = "chr22"
                input[1] = Channel.of([
                    [genome:"GRCh37"],
                    file("https://raw.githubusercontent.com/LouisLeNezet/test-datasets/phaseimpute/data/reference_genome/21_22/hs38DH.chr21_22.s.fa", checkIfExists: true),
                    file("https://raw.githubusercontent.com/LouisLeNezet/test-datasets/phaseimpute/data/reference_genome/21_22/hs38DH.chr21_22.s.fa.fai", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.regions).match() }
            )
        }
    }

    test("Should run with specified region without fasta") {

        when {
            workflow {
                """
                input[0] = "chr22:0-4000"
                input[1] = Channel.of([[],[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.regions).match() }
            )
        }
    }
}
