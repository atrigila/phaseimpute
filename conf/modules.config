/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // Simulate workflow
    withName: VIEW_REGION {
        ext.args = [
        ].join(' ')
        ext.prefix = { "${meta.id}_R${meta.region}" }
    }
    withName: VIEW_DEPTH {
        ext.args = [
        ].join(' ')
        ext.prefix = { "${meta.id}_D${meta.depth}" }
    }

    // Panel preparation workflow
    withName: VIEW_VCF_REGION {
        ext.args = [
            "-Oz",
            "--no-version"
        ].join(' ')
        ext.prefix = { "${meta.id}_${meta.region}" }
    }

    withName: BCFTOOLS_ANNOTATE {
        ext.args = [
            "-Oz",
            "--no-version"
        ].join(' ')
        ext.prefix = { "${meta.id}_chrDel_${meta.region}" }
    }

    withName: VIEW_VCF_SNPS {
        ext.args = [
            "-m 2",
            "-M 2",
            "-v snps",
            "--no-version"
        ].join(' ')
        ext.prefix = { "${meta.id}_SPNS" }
    }
    withName: BCFTOOLS_NORM{
        ext.args = [
            "-m",
            "-any",
            "--no-version"
        ].join(' ')
        ext.prefix = { "${meta.id}_norm" }
    }
    withName: VIEW_VCF_SITES {
        ext.args = [
            "-G",
            "-m 2",
            "-M 2",
            "-v snps",
            "--no-version"
        ].join(' ')
        ext.prefix = { "${meta.id}_SITES" }
    }
    withName: BCFTOOLS_QUERY {
        ext.args = [
            "-f'%CHROM\t%POS\t%REF,%ALT\n'",
        ].join(' ')
        ext.prefix = { "${meta.id}_SITES_TSV" }
    }
    withName: TABIX_TABIX {
        ext.args = [
            "-s1",
            "-b2",
            "-e2"
        ].join(' ')
        ext.prefix = { "${meta.id}_SITES_TSV" }
    }
    withName: BEDTOOLS_MAKEWINDOWS {
        ext.args = [
            '-w 60000',
            '-s 40000'
        ].join(' ')
        ext.prefix = { "${meta.id}_chunks" }
    }
    withName: BCFTOOLS_MPILEUP {
        ext.args = [
            "-I",
            "-E",
            "-a 'FORMAT/DP'"
        ].join(' ')
        ext.args2 = [
            "-Aim",
            "-C alleles"
        ].join(' ')
    }

    withName: GLIMPSE_PHASE {
        ext.args = [
            "--impute-reference-only-variants"
        ].join(' ')
        ext.prefix = { "${meta.id}" }
        ext.suffix = "bcf"
    }
    withName: GLIMPSE_CHUNK {
        ext.args = [
            "--window-size 200000",
            "--buffer-size 20000"
        ].join(' ')
        ext.prefix = { "${meta.id}" }
    }
    withName: GLIMPSE_LIGATE {
        ext.prefix = { "${meta.id}_D${meta.depth}_P${meta.panel}" }
    }
    withName: GLIMPSE_CONCORDANCE {
        ext.prefix = { "${meta.id}_D${meta.depth}_P${meta.panel}_R${meta.region}" }
    }
    withName: ADD_COLUMNS {
        ext.prefix = { "${meta.id}_D${meta.depth}_P${meta.panel}_R${meta.region}_SNP" }
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
